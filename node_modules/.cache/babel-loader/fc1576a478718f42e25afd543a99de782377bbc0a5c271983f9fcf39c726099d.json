{"ast":null,"code":"import { createPokeId, createPokeIdType, sortPokedexAsc } from \"../Assets/sortPokemon\";\nimport config from \"../config\";\nimport generationSprites from \"./generationSprites\";\nexport const fullPokedex = async setPokemonData => {\n  const response = await fetch(config.BASE_API_DOMAIN + config.ENDPOINT_SPECIES + \"?offset=0&limit=0\");\n  let data = await response.json();\n  const response2 = await fetch(config.BASE_API_DOMAIN + config.ENDPOINT_SPECIES + \"?offset=0&limit=\" + data.count);\n  data = await response2.json();\n  data = createPokeId(data.results);\n  data = sortPokedexAsc(data);\n  setPokemonData({\n    speciesList: data,\n    sprite: generationSprites.full\n  });\n};\nexport const generationSearch = async (setPokemonData, id) => {\n  const response = await fetch(config.BASE_API_DOMAIN + config.ENDPOINT_GENERATION + id);\n  let data = await response.json();\n  data = createPokeId(data.pokemon_species);\n  data = sortPokedexAsc(data);\n  setPokemonData({\n    speciesList: data,\n    sprite: generationSprites[id]\n  });\n};\nexport const typeSearch = async (setPokemonData, id, setTitle) => {\n  const response = await fetch(config.BASE_API_DOMAIN + config.ENDPOINT_TYPE + id);\n  let data = await response.json();\n  setTitle(`Searching by Type (${data.name.toUpperCase()})`);\n  data = createPokeIdType(data.pokemon.map(data => {\n    return {\n      name: data.pokemon.name,\n      url: data.pokemon.url\n    };\n  }));\n  data = sortPokedexAsc(data);\n  setPokemonData({\n    speciesList: data,\n    sprite: generationSprites.full\n  });\n};\nexport const colorSearch = async (setPokemonData, id, setTitle) => {\n  const response = await fetch(config.BASE_API_DOMAIN + config.ENDPOINT_COLOR + id);\n  let data = await response.json();\n  setTitle(`Searching by Color (${data.name.toUpperCase()})`);\n  data = createPokeIdType(data.pokemon_species.map(data => {\n    return {\n      name: data.name,\n      url: data.url\n    };\n  }));\n  data = sortPokedexAsc(data);\n  setPokemonData({\n    speciesList: data,\n    sprite: generationSprites.full\n  });\n};\nexport const eggGroupSearch = async (setPokemonData, id, setTitle) => {\n  const response = await fetch(config.BASE_API_DOMAIN + config.ENDPOINT_EGG_GROUP + id);\n  let data = await response.json();\n  setTitle(`Searching by Egg Group (${data.name.toUpperCase()})`);\n  data = createPokeIdType(data.pokemon_species.map(data => {\n    return {\n      name: data.name,\n      url: data.url\n    };\n  }));\n  data = sortPokedexAsc(data);\n  setPokemonData({\n    speciesList: data,\n    sprite: generationSprites.full\n  });\n};\nexport const habitatSearch = async (setPokemonData, id, setTitle) => {\n  const response = await fetch(config.BASE_API_DOMAIN + config.ENDPOINT_HABITAT + id);\n  let data = await response.json();\n  setTitle(`Searching by Habitat (${data.name.toUpperCase()})`);\n  data = createPokeIdType(data.pokemon_species.map(data => {\n    return {\n      name: data.name,\n      url: data.url\n    };\n  }));\n  data = sortPokedexAsc(data);\n  setPokemonData({\n    speciesList: data,\n    sprite: generationSprites.full\n  });\n};\nexport const shapeSearch = async (setPokemonData, id, setTitle) => {\n  const response = await fetch(config.BASE_API_DOMAIN + config.ENDPOINT_SHAPE + id);\n  let data = await response.json();\n  setTitle(`Searching by Shape (${data.name.toUpperCase()})`);\n  data = createPokeIdType(data.pokemon_species.map(data => {\n    return {\n      name: data.name,\n      url: data.url\n    };\n  }));\n  data = sortPokedexAsc(data);\n  setPokemonData({\n    speciesList: data,\n    sprite: generationSprites.full\n  });\n};","map":{"version":3,"names":["createPokeId","createPokeIdType","sortPokedexAsc","config","generationSprites","fullPokedex","setPokemonData","response","fetch","BASE_API_DOMAIN","ENDPOINT_SPECIES","data","json","response2","count","results","speciesList","sprite","full","generationSearch","id","ENDPOINT_GENERATION","pokemon_species","typeSearch","setTitle","ENDPOINT_TYPE","name","toUpperCase","pokemon","map","url","colorSearch","ENDPOINT_COLOR","eggGroupSearch","ENDPOINT_EGG_GROUP","habitatSearch","ENDPOINT_HABITAT","shapeSearch","ENDPOINT_SHAPE"],"sources":["E:/Project2-PokedexLite-main/Project2-PokedexLite-main/src/Assets/pokedexSearch.js"],"sourcesContent":["import {\n  createPokeId,\n  createPokeIdType,\n  sortPokedexAsc,\n} from \"../Assets/sortPokemon\";\nimport config from \"../config\";\nimport generationSprites from \"./generationSprites\";\n\nexport const fullPokedex = async (setPokemonData) => {\n  const response = await fetch(\n    config.BASE_API_DOMAIN + config.ENDPOINT_SPECIES + \"?offset=0&limit=0\"\n  );\n  let data = await response.json();\n\n  const response2 = await fetch(\n    config.BASE_API_DOMAIN +\n      config.ENDPOINT_SPECIES +\n      \"?offset=0&limit=\" +\n      data.count\n  );\n  data = await response2.json();\n  data = createPokeId(data.results);\n  data = sortPokedexAsc(data);\n  setPokemonData({\n    speciesList: data,\n    sprite: generationSprites.full,\n  });\n};\n\nexport const generationSearch = async (setPokemonData, id) => {\n  const response = await fetch(\n    config.BASE_API_DOMAIN + config.ENDPOINT_GENERATION + id\n  );\n  let data = await response.json();\n  data = createPokeId(data.pokemon_species);\n  data = sortPokedexAsc(data);\n  setPokemonData({\n    speciesList: data,\n    sprite: generationSprites[id],\n  });\n};\n\nexport const typeSearch = async (setPokemonData, id, setTitle) => {\n  const response = await fetch(\n    config.BASE_API_DOMAIN + config.ENDPOINT_TYPE + id\n  );\n  let data = await response.json();\n  setTitle(`Searching by Type (${data.name.toUpperCase()})`);\n  data = createPokeIdType(\n    data.pokemon.map((data) => {\n      return { name: data.pokemon.name, url: data.pokemon.url };\n    })\n  );\n  data = sortPokedexAsc(data);\n  setPokemonData({\n    speciesList: data,\n    sprite: generationSprites.full,\n  });\n};\n\nexport const colorSearch = async (setPokemonData, id, setTitle) => {\n  const response = await fetch(\n    config.BASE_API_DOMAIN + config.ENDPOINT_COLOR + id\n  );\n  let data = await response.json();\n  setTitle(`Searching by Color (${data.name.toUpperCase()})`);\n  data = createPokeIdType(\n    data.pokemon_species.map((data) => {\n      return { name: data.name, url: data.url };\n    })\n  );\n  data = sortPokedexAsc(data);\n  setPokemonData({\n    speciesList: data,\n    sprite: generationSprites.full,\n  });\n};\n\nexport const eggGroupSearch = async (setPokemonData, id, setTitle) => {\n  const response = await fetch(\n    config.BASE_API_DOMAIN + config.ENDPOINT_EGG_GROUP + id\n  );\n  let data = await response.json();\n  setTitle(`Searching by Egg Group (${data.name.toUpperCase()})`);\n  data = createPokeIdType(\n    data.pokemon_species.map((data) => {\n      return { name: data.name, url: data.url };\n    })\n  );\n  data = sortPokedexAsc(data);\n  setPokemonData({\n    speciesList: data,\n    sprite: generationSprites.full,\n  });\n};\n\nexport const habitatSearch = async (setPokemonData, id, setTitle) => {\n  const response = await fetch(\n    config.BASE_API_DOMAIN + config.ENDPOINT_HABITAT + id\n  );\n  let data = await response.json();\n  setTitle(`Searching by Habitat (${data.name.toUpperCase()})`);\n  data = createPokeIdType(\n    data.pokemon_species.map((data) => {\n      return { name: data.name, url: data.url };\n    })\n  );\n  data = sortPokedexAsc(data);\n  setPokemonData({\n    speciesList: data,\n    sprite: generationSprites.full,\n  });\n};\n\nexport const shapeSearch = async (setPokemonData, id, setTitle) => {\n  const response = await fetch(\n    config.BASE_API_DOMAIN + config.ENDPOINT_SHAPE + id\n  );\n  let data = await response.json();\n  setTitle(`Searching by Shape (${data.name.toUpperCase()})`);\n  data = createPokeIdType(\n    data.pokemon_species.map((data) => {\n      return { name: data.name, url: data.url };\n    })\n  );\n  data = sortPokedexAsc(data);\n  setPokemonData({\n    speciesList: data,\n    sprite: generationSprites.full,\n  });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}