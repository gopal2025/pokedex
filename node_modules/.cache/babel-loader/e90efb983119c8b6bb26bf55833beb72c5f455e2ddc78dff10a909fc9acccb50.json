{"ast":null,"code":"import { cleanName } from \"./cleanup\";\nexport function createPokeId(myData) {\n  let myList = [];\n  myList = myData.map(data => {\n    return {\n      name: cleanName(data.name),\n      url: data.url,\n      pokeid: parseInt(data.url.split(\"/\").slice(-2, -1))\n    };\n  });\n  return myList;\n}\nexport function createPokeIdType(myData) {\n  let myList = [];\n  myList = myData.map(data => {\n    let name = data.name.split(\"-\");\n    let firstName = cleanName(name[0]);\n    name.shift();\n    if (name.length > 0) {\n      name = \"(\" + name.map(data => data.toUpperCase()).join(\" \") + \")\";\n    }\n    return {\n      name: `${firstName}\\n${name}`,\n      url: data.url,\n      pokeid: parseInt(data.url.split(\"/\").slice(-2, -1))\n    };\n  });\n  return myList;\n}\nexport function sortPokedexAsc(myList) {\n  myList.sort((a, b) => {\n    let idA = a.pokeid;\n    let idB = b.pokeid;\n    if (idA < idB) return -1;else return 1;\n  });\n  return myList;\n}\nfunction sortPokedexDsc(myList) {\n  myList.sort((a, b) => {\n    let idA = a.pokeid;\n    let idB = b.pokeid;\n    if (idA > idB) return -1;else return 1;\n  });\n  return myList;\n}\nexport function sortNameAsc(myList) {\n  myList.sort((a, b) => {\n    let idA = a.name.toLowerCase();\n    let idB = b.name.toLowerCase();\n    if (idA < idB) return -1;else return 1;\n  });\n  return myList;\n}\nfunction sortNameDsc(myList) {\n  myList.sort((a, b) => {\n    let idA = a.name.toLowerCase();\n    let idB = b.name.toLowerCase();\n    if (idA > idB) return -1;else return 1;\n  });\n  return myList;\n}\nexport function replaceImage(event) {\n  event.target.src = \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/0.png\";\n}\nexport function checkAgainstSearch(name, id, searchQuery) {\n  return name.toLowerCase().includes(searchQuery.toLowerCase()) || id.toString().includes(searchQuery.toLowerCase());\n}\nexport function checkAgainstSearchLocation(name, searchQuery) {\n  return name.toLowerCase().includes(searchQuery.toLowerCase());\n}\nexport function doSort(sortType, pokemonData) {\n  let newList = pokemonData.speciesList.map(data => data);\n  switch (sortType) {\n    case \"pokedex-asc\":\n      {\n        newList = sortPokedexAsc(newList);\n        break;\n      }\n    case \"pokedex-dsc\":\n      {\n        newList = sortPokedexDsc(newList);\n        break;\n      }\n    case \"alphabet-asc\":\n      {\n        newList = sortNameAsc(newList);\n        break;\n      }\n    case \"alphabet-dsc\":\n      {\n        newList = sortNameDsc(newList);\n        break;\n      }\n    default:\n      {\n        newList = sortPokedexAsc(newList);\n        break;\n      }\n  }\n  return newList;\n}\nexport function doSortLocation(sortType, regionData) {\n  let newList = regionData.map(data => data);\n  switch (sortType) {\n    case \"alphabet-asc\":\n      {\n        newList = sortNameAsc(newList);\n        break;\n      }\n    case \"alphabet-dsc\":\n      {\n        newList = sortNameDsc(newList);\n        break;\n      }\n    default:\n      {\n        newList = sortNameAsc(newList);\n        break;\n      }\n  }\n  return newList;\n}\nexport async function pokemonToSpecies(url, setSpecies) {\n  const response = await fetch(url);\n  const data = await response.json();\n  setSpecies(data.species.url);\n}\nexport const romanList = [\"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\", \"x\", \"xi\", \"xii\", \"xiii\", \"xiv\", \"xv\", \"xvi\", \"xvii\", \"xviii\", \"xix\", \"xx\"];","map":{"version":3,"names":["cleanName","createPokeId","myData","myList","map","data","name","url","pokeid","parseInt","split","slice","createPokeIdType","firstName","shift","length","toUpperCase","join","sortPokedexAsc","sort","a","b","idA","idB","sortPokedexDsc","sortNameAsc","toLowerCase","sortNameDsc","replaceImage","event","target","src","checkAgainstSearch","id","searchQuery","includes","toString","checkAgainstSearchLocation","doSort","sortType","pokemonData","newList","speciesList","doSortLocation","regionData","pokemonToSpecies","setSpecies","response","fetch","json","species","romanList"],"sources":["E:/Project2-PokedexLite-main/Project2-PokedexLite-main/src/Assets/sortPokemon.js"],"sourcesContent":["import { cleanName } from \"./cleanup\";\n\nexport function createPokeId(myData) {\n  let myList = [];\n  myList = myData.map((data) => {\n    return {\n      name: cleanName(data.name),\n      url: data.url,\n      pokeid: parseInt(data.url.split(\"/\").slice(-2, -1)),\n    };\n  });\n  return myList;\n}\n\nexport function createPokeIdType(myData) {\n  let myList = [];\n  myList = myData.map((data) => {\n    let name = data.name.split(\"-\");\n    let firstName = cleanName(name[0]);\n    name.shift();\n    if (name.length > 0) {\n      name = \"(\" + name.map((data) => data.toUpperCase()).join(\" \") + \")\";\n    }\n\n    return {\n      name: `${firstName}\\n${name}`,\n      url: data.url,\n      pokeid: parseInt(data.url.split(\"/\").slice(-2, -1)),\n    };\n  });\n  return myList;\n}\n\nexport function sortPokedexAsc(myList) {\n  myList.sort((a, b) => {\n    let idA = a.pokeid;\n    let idB = b.pokeid;\n    if (idA < idB) return -1;\n    else return 1;\n  });\n  return myList;\n}\n\nfunction sortPokedexDsc(myList) {\n  myList.sort((a, b) => {\n    let idA = a.pokeid;\n    let idB = b.pokeid;\n    if (idA > idB) return -1;\n    else return 1;\n  });\n  return myList;\n}\n\nexport function sortNameAsc(myList) {\n  myList.sort((a, b) => {\n    let idA = a.name.toLowerCase();\n    let idB = b.name.toLowerCase();\n    if (idA < idB) return -1;\n    else return 1;\n  });\n  return myList;\n}\n\nfunction sortNameDsc(myList) {\n  myList.sort((a, b) => {\n    let idA = a.name.toLowerCase();\n    let idB = b.name.toLowerCase();\n    if (idA > idB) return -1;\n    else return 1;\n  });\n  return myList;\n}\n\nexport function replaceImage(event) {\n  event.target.src =\n    \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/0.png\";\n}\n\nexport function checkAgainstSearch(name, id, searchQuery) {\n  return (\n    name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    id.toString().includes(searchQuery.toLowerCase())\n  );\n}\n\nexport function checkAgainstSearchLocation(name, searchQuery) {\n  return name.toLowerCase().includes(searchQuery.toLowerCase());\n}\n\nexport function doSort(sortType, pokemonData) {\n  let newList = pokemonData.speciesList.map((data) => data);\n  switch (sortType) {\n    case \"pokedex-asc\": {\n      newList = sortPokedexAsc(newList);\n      break;\n    }\n    case \"pokedex-dsc\": {\n      newList = sortPokedexDsc(newList);\n      break;\n    }\n    case \"alphabet-asc\": {\n      newList = sortNameAsc(newList);\n      break;\n    }\n    case \"alphabet-dsc\": {\n      newList = sortNameDsc(newList);\n      break;\n    }\n    default: {\n      newList = sortPokedexAsc(newList);\n      break;\n    }\n  }\n  return newList;\n}\n\nexport function doSortLocation(sortType, regionData) {\n  let newList = regionData.map((data) => data);\n  switch (sortType) {\n    case \"alphabet-asc\": {\n      newList = sortNameAsc(newList);\n      break;\n    }\n    case \"alphabet-dsc\": {\n      newList = sortNameDsc(newList);\n      break;\n    }\n    default: {\n      newList = sortNameAsc(newList);\n      break;\n    }\n  }\n  return newList;\n}\n\nexport async function pokemonToSpecies(url, setSpecies) {\n  const response = await fetch(url);\n  const data = await response.json();\n  setSpecies(data.species.url);\n}\n\nexport const romanList = [\n  \"i\",\n  \"ii\",\n  \"iii\",\n  \"iv\",\n  \"v\",\n  \"vi\",\n  \"vii\",\n  \"viii\",\n  \"ix\",\n  \"x\",\n  \"xi\",\n  \"xii\",\n  \"xiii\",\n  \"xiv\",\n  \"xv\",\n  \"xvi\",\n  \"xvii\",\n  \"xviii\",\n  \"xix\",\n  \"xx\",\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}